<template>
  <div class="custom-grid" :style="{ width: gridWidth + 'px', height: gridHeight + 'px' }">
    <!-- フィルタリング入力欄 -->
    <div class="filter">
      <label>フィルター:</label>
      <input type="text" v-model="filterKey" @input="filterData">
    </div>
    <div class="grid-header">
      <div class="header-cell checkbox-cell">
        <input type="checkbox" @change="selectAllRows" v-model="selectAll">
      </div>
      <div v-for="(column, index) in columns" :key="index" class="header-cell" :style="{ width: column.width + 'px' }">
        {{ column.label }}
      </div>
    </div>
    <div class="grid-body" ref="gridBody" @scroll="handleScroll" :style="{ height: bodyHeight + 'px' }">
      <div :style="{ height: totalHeight + 'px' }">
        <div v-for="(row, rowIndex) in visibleRows" :key="rowIndex"
             v-if="matchesFilter(row)"
             class="grid-row"
             :class="{ 'selected-row': selectedRows.includes(row.id), 'hovered-row': rowIndex === hoveredRowIndex }"
             @click="selectRow(row.id)"
             @mouseover="hoveredRowIndex = rowIndex"
             @mouseleave="hoveredRowIndex = null">
          <div class="row-cell checkbox-cell">
            <input type="checkbox" :checked="isSelected(row.id)" @change="toggleSelection(row.id)">
          </div>
          <div v-for="(column, colIndex) in columns" :key="colIndex" class="row-cell" :style="{ width: column.width + 'px' }">
            {{ row[column.field] }}
          </div>
        </div>
      </div>
    </div>
  </div>
</template>

<script>
export default {
  props: {
    data: {
      type: Array,
      required: true
    },
    columns: {
      type: Array,
      required: true
    },
    gridWidth: {
      type: Number,
      default: 600
    },
    gridHeight: {
      type: Number,
      default: 400
    },
    visibleRowCount: {
      type: Number,
      default: 10 // デフォルトで10行を表示
    }
  },
  data() {
    return {
      selectedRows: [], // 選択された行のIDを格納する配列
      hoveredRowIndex: null,
      itemHeight: 40, // デフォルトの行の高さ
      startIndex: 0, // 表示する最初の行のインデックス
      endIndex: this.visibleRowCount - 1, // 表示する最後の行のインデックス
      filterKey: '', // フィルタリングするキーワードを保持するデータ
      selectAll: false // 全選択チェックボックスの状態
    };
  },
  computed: {
    totalHeight() {
      return this.data.length * this.itemHeight;
    },
    bodyHeight() {
      return Math.min(this.gridHeight, this.data.length * this.itemHeight);
    },
    visibleRows() {
      return this.data.slice(this.startIndex, this.endIndex + 1);
    }
  },
  watch: {
    data() {
      this.updateVisibleRows();
    },
    gridHeight() {
      this.updateVisibleRows();
    },
    visibleRowCount() {
      this.updateVisibleRows();
    }
  },
  mounted() {
    this.updateVisibleRows();
  },
  methods: {
    updateVisibleRows() {
      this.endIndex = Math.min(this.startIndex + this.visibleRowCount - 1, this.data.length - 1);
    },
    selectRow(rowId) {
      if (this.isSelected(rowId)) {
        this.selectedRows = this.selectedRows.filter(id => id !== rowId);
      } else {
        this.selectedRows.push(rowId);
      }
    },
    toggleSelection(rowId) {
      if (this.isSelected(rowId)) {
        this.selectedRows = this.selectedRows.filter(id => id !== rowId);
      } else {
        this.selectedRows.push(rowId);
      }
    },
    isSelected(rowId) {
      return this.selectedRows.includes(rowId);
    },
    selectAllRows(event) {
      if (event.target.checked) {
        this.selectedRows = this.data.map(row => row.id);
      } else {
        this.selectedRows = [];
      }
    },
    handleScroll() {
      const scrollTop = this.$refs.gridBody.scrollTop;
      this.startIndex = Math.floor(scrollTop / this.itemHeight);
      this.endIndex = Math.min(this.startIndex + this.visibleRowCount - 1, this.data.length - 1);
    },
    filterData() {
      // フィルタリング処理
      this.startIndex = 0; // フィルタリング後は先頭から表示
      this.endIndex = this.visibleRowCount - 1;
    },
    matchesFilter(row) {
      // フィルタリング条件にマッチするかどうかを判定
      const filterKey = this.filterKey.toLowerCase();
      return Object.values(row).some(value => {
        if (typeof value === 'string') {
          return value.toLowerCase().includes(filterKey);
        }
        return false;
      });
    },
    getSelectedRows() {
      return this.selectedRows.map(id => this.data.find(row => row.id === id));
    },
    getAllRows() {
      return this.data;
    }
  }
};
</script>

<style scoped>
.custom-grid {
  border: 1px solid #ccc;
  overflow: auto; /* スクロールバーを表示 */
  max-height: 400px; /* グリッドの高さを制限 */
}

.grid-header, .grid-body {
  display: flex;
}

.header-cell, .row-cell {
  padding: 8px 12px;
  border-right: 1px solid #ccc;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

.checkbox-cell {
  flex: 0 0 40px; /* チェックボックス列の幅 */
}

.grid-row {
  display: flex;
}

.selected-row {
  background-color: #cce5ff;
}

.hovered-row {
  background-color: #f0f0f0;
}

.filter {
  margin-bottom: 10px;
}
</style>
