<template>
  <div class="custom-grid" :style="{ width: gridWidth + 'px', height: gridHeight + 'px' }">
    <!-- フィルタリング入力欄 -->
    <div class="filter">
      <label>フィルター:</label>
      <input type="text" v-model="filterKey" @input="filterData">
    </div>
    <div class="grid-body" ref="gridBody" @scroll="handleScroll" :style="{ height: bodyHeight + 'px' }">
      <table class="grid-table">
        <thead>
          <tr class="header-row">
            <th class="checkbox-cell">
              <input type="checkbox" @change="selectAllRows">
            </th>
            <th v-for="(column, index) in columns" :key="index" :style="{ width: column.width + 'px' }">
              {{ column.label }}
            </th>
          </tr>
        </thead>
        <tbody>
          <tr v-for="(row, rowIndex) in visibleRows" :key="rowIndex"
              class="grid-row"
              :class="{ 'selected-row': isSelected(row), 'hovered-row': rowIndex === hoveredRowIndex }"
              @click="selectRow(row)"
              @mouseover="hoveredRowIndex = rowIndex"
              @mouseleave="hoveredRowIndex = null">
            <td class="checkbox-cell">
              <input type="checkbox" :checked="isSelected(row)" @change="selectRow(row)">
            </td>
            <td v-for="(column, colIndex) in columns" :key="colIndex" :style="{ width: column.width + 'px' }">
              {{ row[column.field] }}
            </td>
          </tr>
        </tbody>
      </table>
    </div>
  </div>
</template>

<script>
export default {
  props: {
    data: {
      type: Array,
      required: true
    },
    columns: {
      type: Array,
      required: true
    },
    gridWidth: {
      type: Number,
      default: 600
    },
    gridHeight: {
      type: Number,
      default: 400
    },
    visibleRowCount: {
      type: Number,
      default: 10 // デフォルトで10行を表示
    }
  },
  data() {
    return {
      selectedRows: [],
      hoveredRowIndex: null,
      itemHeight: 40, // デフォルトの行の高さ
      startIndex: 0, // 表示する最初の行のインデックス
      endIndex: this.visibleRowCount - 1, // 表示する最後の行のインデックス
      filterKey: '', // フィルタリングするキーワードを保持するデータ
      selectAll: false // 全選択チェックボックスの状態
    };
  },
  computed: {
    totalHeight() {
      return this.data.length * this.itemHeight;
    },
    bodyHeight() {
      return Math.min(this.gridHeight, this.data.length * this.itemHeight);
    },
    visibleRows() {
      return this.data.slice(this.startIndex, this.endIndex + 1);
    }
  },
  watch: {
    data() {
      this.updateVisibleRows();
    },
    gridHeight() {
      this.updateVisibleRows();
    },
    visibleRowCount() {
      this.updateVisibleRows();
    }
  },
  mounted() {
    this.updateVisibleRows();
  },
  methods: {
    updateVisibleRows() {
      this.endIndex = Math.min(this.startIndex + this.visibleRowCount - 1, this.data.length - 1);
    },
    selectRow(row) {
      const index = this.data.indexOf(row);
      if (this.isSelected(row)) {
        this.selectedRows = this.selectedRows.filter(r => r !== index);
      } else {
        this.selectedRows.push(index);
      }
    },
    isSelected(row) {
      return this.selectedRows.includes(this.data.indexOf(row));
    },
    selectAllRows(event) {
      if (event.target.checked) {
        this.selectedRows = Array.from(Array(this.data.length).keys());
      } else {
        this.selectedRows = [];
      }
    },
    handleScroll() {
      const scrollTop = this.$refs.gridBody.scrollTop;
      this.startIndex = Math.floor(scrollTop / this.itemHeight);
      this.endIndex = Math.min(this.startIndex + this.visibleRowCount - 1, this.data.length - 1);
    },
    filterData() {
      this.startIndex = 0; // フィルタリング後は先頭から表示
      this.endIndex = this.visibleRowCount - 1;
    }
  }
};
</script>

<style scoped>
.custom-grid {
  border: 1px solid #ccc;
  overflow: auto; /* スクロールバーを表示 */
  max-height: 400px; /* グリッドの高さを制限 */
}

.grid-table {
  width: 100%;
  border-collapse: collapse;
}

.grid-table th, .grid-table td {
  padding: 8px 12px;
  border: 1px solid #ccc;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

.checkbox-cell {
  width: 40px; /* チェックボックス列の幅 */
}

.grid-row:hover {
  background-color: #f0f0f0;
}

.selected-row {
  background-color: #cce5ff;
}
</style>
